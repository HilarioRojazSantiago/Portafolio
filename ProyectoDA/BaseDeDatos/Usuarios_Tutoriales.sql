-- MySQL dump 10.13  Distrib 5.7.24, for Linux (x86_64)
--
-- Host: localhost    Database: Usuarios
-- ------------------------------------------------------
-- Server version	5.7.24-0ubuntu0.16.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `Tutoriales`
--

DROP TABLE IF EXISTS `Tutoriales`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Tutoriales` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `#Tema` int(11) NOT NULL,
  `#Tutorial` int(11) NOT NULL,
  `Titulo` varchar(100) DEFAULT NULL,
  `Tutorial` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Tutoriales`
--

LOCK TABLES `Tutoriales` WRITE;
/*!40000 ALTER TABLE `Tutoriales` DISABLE KEYS */;
INSERT INTO `Tutoriales` VALUES (1,1,1,'Definición del problema','<html><p>Está dada en sí por el enunciado del problema, el cual debe ser claro y complejo.</p><p>Es importante que conozcamos exactamente “que se desea obtener al final del proceso”, mientras esto no se comprenda no puede pasarse a la siguiente etapa.</p></html>'),(2,1,2,'Analisis de los datos','<html><p>Una vez que el problema ha sido definido y comprendido, deben analizarse los siguientes aspectos:</p><ul><li>Los resultados esperados.</li><li>Los datos de entrada disponibles.</li><li>Herramientas a nuestro alcance para manipular los datos y alcanzar un resultado (fórmulas, tablas, accesorios diversos).</li></ul><p>Una medida aconsejable para facilitar esta etapa consiste en colocarnos en lugar de la computadora deduciendo los elementos que necesitaremos para alcanzar el resultado.</p></html>'),(3,1,3,'Diseño de la solución','<html><p>Esta etapa incluye la descripción del algoritmo resultante en un lenguaje natural, de diagrama de flujo o natural de programación.</p><p>Los problemas complejos se pueden resolver más eficazmente por la computadora cuando se dividen en subproblemas que sean más fácil de solucionar.</p><br><p>Ejemplo:</p><p>El problema de cálculo de la longitud y superficie de un círculo se puede descomponer en subproblemas más simples :</p><ul><li>Leer datos de entrada.</li><li>Calcular superficie y longitud.</li><li>Escribir resultados (datos de salida).</li></ul></html>'),(4,1,4,'Codificación','<html><p>Se refiere a la obtención de un programa definitivo que pueda ser comprensible para la máquina. Incluye una etapa que se reconoce como compilación.</p><br><p>Si la codificación original se realizó en papel, previo a la compilación deberá existir un paso conocido como transcripción.</p></html>'),(5,1,5,'Prueba y depuración','<html><p>Una vez que se ha obtenido el programa ejecutable, este es sometido a prueba a fin de determinar si resuelve o no el problema planteado en forma satisfactoria.</p><br><p>Las pruebas que se le aplican son de diversa índole y generalmente dependen del tipo de problema que se está resolviendo. Comúnmente se inicia la prueba de un programa introduciendo datos válidos, inválidos e incongruentes y observando como reacciona en cada ocasión.</p><br><p>El proceso de depuración consiste en localizar los errores y corregirlos en caso de que estos existan. Si no existen errores, puede entenderse la depuración como una etapa de refinamiento en la que se ajustan detalles para optimizar el desempeño del programa.</p></html>'),(6,1,6,'Documetación','<html><p>Debido a que el programa resultante en esta etapa se encuentra totalmente depurado (sin errores), se procede a la utilización para resolver problemas del tipo que dio origen a su diseño. En vista de que esta utilización no podrá ser supervisada en todas las ocasiones por el programador, debe crearse un manual o guía de operación que indique los pasos a seguir para utilizar el programa.</p></html>'),(7,1,7,'Mantenimiento','<html><p>Se refiere a las actualizaciones que deban aplicarse al programa cuando las circunstancias así lo requieran. Este programa deberá ser susceptible de ser modificado para adecuarlo a nuevas condiciones de operación.</p><br><p>Cualquier actualización o cambio en el programa deberá reflejarse en su documentación.</p></html>'),(8,2,1,'Tipos de datos','<html><p>Tipo Real: Una variable de tipo real admite datos numéricos, que pueden ser enteros y/o con punto decimal.</p><br><p>Tipo Entero: Es una especialización que sólo permite almacenar valores enteros; cualquier valor no entero que se lea o asigne en una variable de este tipo será truncado.</p><br><p>Tipo Cadena: Es una secuencia ordenada (de longitud arbitraria, aunque finita) de elementos que pertenecen a un cierto lenguaje formal o alfabeto análogas a una fórmula o a una oración.</p><br><p>Tipo Carácter: Las variables de caracteres se usan para almacenar valores alfabéticos, en particular letras solas.</p><br><p>Tipo Lógico: Una variable de tipo LOGICO sólo puede tomar los valores VERDADERO y FALSO, pero cuando se lee una variable ya definida como lógica, el usuario puede ingresar también las abreviaciones V y F, o 0 y 1.</p></html>'),(9,2,2,'Forma 1','<html><p align=\\\"center\\\"> <em> Definir total como entero</em></p><br><br><p>Esta es una forma muy organizada y detalla de declarar variables, con la palabra Definir, indicamos a PSeInt que inicializaremos una variable, colocamos un nombre, luego decimos de que tipo será “como entero”.</p></html>'),(10,2,3,'Forma 2','<html><p>Podemos también definir múltiples variables en una sola línea, ejemplo:</p><br><p align=\\\"center\\\"> <em>Definir numero1, numero2, numero3, total como entero</em></p><br><br><p>Declarar y establecer el tipo de dato a utilizar de la forma anterior es muy útil en algoritmos largos que requieren de mayor organización.</p></html>'),(11,2,4,'Forma 3','<html><p>De la tercera forma solo asignamos un nombre a la variable seguido de su valor.</p><br><p align=\\\"center\\\"> <em>numero1 <- 0</em></p><br><br><p>Esta forma es más rápida y asignamos un valor inicial, sin embargo puede no ayudar mucho en la lectura fácil del código, este tipo de inicialización podemos usarla en condicionales y ciclos, en los cuales utilizamos variables temporales.</p></html>'),(12,2,5,'Forma 4','<html><p>La cuarta forma de inicializar variables se trata del momento en que solicitamos datos al usuario, ejemplo:</p><br><p align=\\\"center\\\"> <em>Escribir \\\"Ingrese un número\\\"</em></p><p align=\\\"center\\\"> <em>Leer n1</em></p><br><br><p>La variable n1, no necesariamente debe estar iniciada con anterioridad, nacería desde el momento en que solicitamos el valor, esta forma de uso de variables es muy utilizada para capturar datos de entrada.</p></html>'),(13,2,6,'Condicionales (If)','<html><p>La secuencia de instrucciones ejecutadas por la instrucción Si-Entonces-Sino depende del valor de una condición lógica</p><br><p><em>Si &lt condición &gt </em></p><p>&nbsp&nbsp&nbsp<em>Entonces</em></p><p>&nbsp&nbsp&nbsp&nbsp&nbsp<em>&lt instrucciones &gt</em></p><p>&nbsp&nbsp&nbsp<em>Sino</em></p><p>&nbsp&nbsp&nbsp&nbsp&nbsp<em>&lt instrucciones &gt</em></p><p><em>FinSi</em></p><br><p>Al ejecutarse esta instrucción, se evalúa la condición y se ejecutan las instrucciones que correspondan: las instrucciones que le siguen al Entonces si la condición es verdadera, o las instrucciones que le siguen al Sino si la condición es falsa. La condición debe ser una expresión lógica, que al ser evaluada retorna Verdadero o Falso.</p><p>La cláusula Entonces debe aparecer siempre, pero la cláusla Sino puede no estar. En ese caso, si la condición es falsa no se ejecuta ninguna instrucción y la ejecución del programa continúa con la instrucción siguiente.</p></html>'),(14,2,7,'Selectiva multiple','<html><p>La secuencia de instrucciones ejecutada por una instrucción Segun depende del valor de una variable numérica.</p><br><p><em>Segun &lt variable &gt Hacer</em></p><p>&nbsp&nbsp&nbsp<em>&lt número1 &gt : &lt instrucciones &gt</em></p><p>&nbsp&nbsp&nbsp<em>&lt número2 &gt,&lt número3 &gt: &lt instrucciones &gt</em></p><p>&nbsp&nbsp&nbsp<em>&lt ... &gt</em></p><p>&nbsp&nbsp&nbsp<em>De Otro Modo: &lt instrucciones &gt</em></p><p><em>FinSi</em></p><br><p>Esta instrucción permite ejecutar opcionalmente varias acciones posibles, dependiendo del valor almacenado en una variable de tipo numérico. Al ejecutarse, se evalúa el contenido de la variable y se ejecuta la secuencia de instrucciones asociada con dicho valor.</p></html>'),(15,2,8,'Mientras','<html><p>La instrucción Mientras ejecuta una secuencia de instrucciones mientras una condición sea verdadera.</p><br><p><em>Mientras &lt condición &gt Hacer</em></p><p>&nbsp&nbsp&nbsp<em>&lt instrucciones &gt</em></p><p><em>FinMientras</em></p><br><p>Al ejecutarse esta instrucción, la condición es evaluada. Si la condición resulta verdadera, se ejecuta una vez la secuencia de instrucciones que forman el cuerpo del ciclo. Al finalizar la ejecución del cuerpo del ciclo se vuelve a evaluar la condición y, si es verdadera, la ejecución se repite. Estos pasos se repiten mientras la condición sea verdadera.</p></html>'),(16,2,9,'Repetir-Hasta','<html><p> La instrucción Repetir-Hasta Que ejecuta una secuencia de instrucciones hasta que la condición sea verdadera.</p><br><p><em>Mientras</em></p><p>&nbsp&nbsp&nbsp<em>&lt instrucciones &gt</em></p><p><em>Hasta Que &lt condicion &gt</em></p><br><p>Al ejecutarse esta instrucción, la secuencia de instrucciones que forma el cuerpo del ciclo se ejecuta una vez y luego se evalúa la condición. Si la condición es falsa, el cuerpo del ciclo se ejecuta nuevamente y se vuelve a evaluar la condición. Esto se repite hasta que la condición sea verdadera. </p></html>'),(17,2,10,'Para','<html><p> La instrucción Para ejecuta una secuencia de instrucciones un número determinado de veces.</p><br><p><em>Para &lt variable &gt <- &lt inicial &gt Hasta &lt final &gt Con Paso &lt paso &gt Hacer </em></p><p>&nbsp&nbsp&nbsp<em>&lt instrucciones &gt</em></p><p><em>FinPara</em></p><br><p> Al ingresar al bloque, la variable &lt variable &gt recibe el valor &lt inicial &gt y se ejecuta la secuencia de instrucciones que forma el cuerpo del ciclo. Luego se incrementa la variable   &lt variable &gt en &lt paso &gt unidades y se evalúa si el valor almacenado en &lt variable &gt superó al valor &lt final &gt. Si esto es falso se repite hasta que &lt variable &gt supere a     &lt final &gt . Si se omite la cláusula Con Paso &lt paso &gt, la variable &lt variable &gt se incrementará en 1.</p></html>');
/*!40000 ALTER TABLE `Tutoriales` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2019-02-12 16:24:21
